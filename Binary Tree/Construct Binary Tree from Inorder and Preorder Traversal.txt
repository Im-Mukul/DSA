/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(inorder == null || preorder == null || preorder.length != inorder.length)
            return null;
        HashMap <Integer , Integer> map = new HashMap<>();
        for(int i = 0 ; i < inorder.length ; i++)
            map.put(inorder[i] , i);
        
        return buildTreePreInt(inorder , 0 , inorder.length - 1 , preorder , 0 , preorder.length - 1 , map);
    }
    
    private TreeNode buildTreePreInt(int[] inorder , int is , int ie , int[] preorder , int ps , int pe , HashMap<Integer , Integer> map){
        if(is > ie || ps > pe)
            return null;
        TreeNode root = new TreeNode(preorder[ps]);
        int inRoot = map.get(root.val);
        int numsLeft = inRoot - is;
        root.left = buildTreePreInt(inorder , is , inRoot - 1 , preorder , ps + 1 , ps + numsLeft , map);
        root.right = buildTreePreInt(inorder , inRoot + 1 , ie , preorder , ps + numsLeft + 1 , pe , map);
        
        return root;
    }
}

/*
Intuition

The two key observations are:

    Preorder traversal follows Root -> Left -> Right, therefore, given the preorder array preorder, we have easy access to the root which is preorder[0].

    Inorder traversal follows Left -> Root -> Right, therefore if we know the position of Root, we can recursively split the entire array into two subtrees.

Now the idea should be clear enough. We will design a recursion function: it will set the first element of preorder as the root, and then construct the entire tree. To find the left and right subtrees, it will look for the root in inorder, so that everything on the left should be the left subtree, and everything on the right should be the right subtree. Both subtrees can be constructed by making another recursion call.

It is worth noting that, while we recursively construct the subtrees, we should choose the next element in preorder to initialize as the new roots. This is because the current one has already been initialized to a parent node for the subtrees.

Algorithm

    Build a hashmap to record the relation of value -> index for inorder, so that we can find the position of root in constant time.
    Initialize an integer variable preorderIndex to keep track of the element that will be used to construct the root.
    Implement the recursion function arrayToTree which takes a range of inorder and returns the constructed binary tree:
        if the range is empty, return null;
        initialize the root with preorder[preorderIndex] and then increment preorderIndex;
        recursively use the left and right portions of inorder to construct the left and right subtrees.
    Simply call the recursion function with the entire range of inorder.

Let NNN be the length of the input arrays.

    Time complexity : O(N)O(N)O(N).

    Building the hashmap takes O(N)O(N)O(N) time, as there are NNN nodes to add, and adding items to a hashmap has a cost of O(1)O(1)O(1), so we get N⋅O(1)=O(N)N \cdot O(1) = O(N)N⋅O(1)=O(N).

    Building the tree also takes O(N)O(N)O(N) time. The recursive helper method has a cost of O(1)O(1)O(1) for each call (it has no loops), and it is called once for each of the NNN nodes, giving a total of O(N)O(N)O(N).

    Taking both into consideration, the time complexity is O(N)O(N)O(N).

    Space complexity : O(N)O(N)O(N).

    Building the hashmap and storing the entire tree each requires O(N)O(N)O(N) memory. The size of the implicit system stack used by recursion calls depends on the height of the tree, which is O(N)O(N)O(N) in the worst case and O(log⁡N)O(\log N)O(logN) on average. Taking both into consideration, the space complexity is O(N)O(N)O(N).

*/
